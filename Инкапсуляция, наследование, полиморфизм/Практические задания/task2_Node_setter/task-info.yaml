type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Вызван setter
    Вызван setter
    Вызван setter
    Node(1, Node(2)) Node(2, None)
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 399
    length: 85
    placeholder_text: |-
      # TODO заменить на вызов setter
              self.next = None
              self.set_next(next_)
    initial_state:
      length: 85
      offset: 399
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'self.next = next_  # вызовется setter'
  - offset: 821
    length: 153
    placeholder_text: |-
      # TODO заменить на getter и setter
          def set_next(self, next_: Optional["Node"] = None) -> None:
              self.is_valid(next_)
              self.next = next_
    initial_state:
      length: 153
      offset: 821
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @property
          def next(self):
              return self._next

          @next.setter
          def next(self, next_: Optional["Node"]):
              print("Вызван setter")
              self.is_valid(next_)
              self._next = next_
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            # TODO заменить на вызов setter
            self.next = None
            self.set_next(next_)

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            return str(self.value)

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        # TODO заменить на getter и setter
        def set_next(self, next_: Optional["Node"] = None) -> None:
            self.is_valid(next_)
            self.next = next_


    if __name__ == "__main__":
        first_node = Node(1)  # отработал setter в init
        second_node = Node(2)  # отработал setter в init

        first_node.next = second_node

        print(repr(first_node), repr(first_node.next))
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
