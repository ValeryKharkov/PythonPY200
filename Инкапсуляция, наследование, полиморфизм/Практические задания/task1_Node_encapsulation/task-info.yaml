type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Node(first_node, Node(second_node)) Node(second_node, None)
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 399
    length: 44
    placeholder_text: 'self.next = None  # TODO заменить на private'
    initial_state:
      length: 44
      offset: 399
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self.__next = None
  - offset: 520
    length: 124
    placeholder_text: 'f"Node({self.value}, {None})" if self.next is None else f"Node({self.value},
      Node({self.next}))"  # TODO заменить на private'
    initial_state:
      length: 124
      offset: 520
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: f"Node({self.value}, {None})" if self.__next is None
      else f"Node({self.value}, Node({self.__next}))"
  - offset: 934
    length: 45
    placeholder_text: 'self.next = next_  # TODO заменить на private'
    initial_state:
      length: 45
      offset: 934
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self.__next = next_
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            self.next = None  # TODO заменить на private
            self.set_next(next_)

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"  # TODO заменить на private

        def __str__(self) -> str:
            return str(self.value)

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        def set_next(self, next_: Optional["Node"] = None) -> None:
            self.is_valid(next_)
            self.next = next_  # TODO заменить на private


    if __name__ == "__main__":
        first_node = Node("first_node")
        second_node = Node("second_node")

        first_node.set_next(second_node)

        print(repr(first_node), repr(second_node))
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
