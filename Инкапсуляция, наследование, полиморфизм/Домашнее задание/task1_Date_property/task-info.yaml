type: theory
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 418
    length: 88
    placeholder_text: |-
      # TODO какой декоратор следует применить?
          def is_leap_year(self, year: int) -> bool:
    initial_state:
      length: 88
      offset: 418
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @staticmethod
          def is_leap_year(year: int) -> bool:
  - offset: 567
    length: 54
    placeholder_text: '...  # TODO записать условие проверки високосного года'
    initial_state:
      length: 54
      offset: 567
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      leap_condition = ((year % 4) == 0 and (year % 100) != 0) or ((year % 400) == 0)
              return True if leap_condition else False
  - offset: 771
    length: 53
    placeholder_text: '...  # TODO вернуть количество дней указанного месяца'
    initial_state:
      length: 53
      offset: 771
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      year_months_index = 0 if not self.is_leap_year(year) else 1
              year_months = self.DAY_OF_MONTH[year_months_index]

              return year_months[month-1]
  - offset: 957
    length: 88
    placeholder_text: '...  # TODO если указанный набор день, месяц и год неверны,
      то вызвать ошибку ValueError'
    initial_state:
      length: 88
      offset: 957
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if day > self.get_max_day(month, year):
                  raise ValueError
  - offset: 1051
    length: 39
    placeholder_text: '# TODO записать getter и setter для дня'
    initial_state:
      length: 39
      offset: 1051
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @property
          def day(self) -> int:
              return self._day

          @day.setter
          def day(self, day: int) -> None:
              if not isinstance(day, int):
                  raise TypeError
              if not 1 <= day <= 31:
                  raise ValueError
              self._day = day
  - offset: 1096
    length: 42
    placeholder_text: '# TODO записать getter и setter для месяца'
    initial_state:
      length: 42
      offset: 1096
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @property
          def month(self) -> int:
              return self._month

          @month.setter
          def month(self, month: int) -> None:
              if not isinstance(month, int):
                  raise TypeError
              if not 1 <= month <= 12:
                  raise ValueError
              self._month = month
  - offset: 1144
    length: 40
    placeholder_text: '# TODO записать getter и setter для года'
    initial_state:
      length: 40
      offset: 1144
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @property
          def year(self) -> int:
              return self._year

          @year.setter
          def year(self, year: int) -> None:
              if not isinstance(year, int):
                  raise TypeError
              if year <= 0:
                  raise ValueError
              self._year = year
  text: |
    class Date:
        """Класс для работы с датами"""
        DAY_OF_MONTH = (
            (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),  # обычный год
            (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)  # високосный
        )

        def __init__(self, day: int, month: int, year: int):
            self.day = day
            self.month = month
            self.year = year

            self.is_valid_date(self.day, self.month, self.year)

        # TODO какой декоратор следует применить?
        def is_leap_year(self, year: int) -> bool:
            """Проверяет, является ли год високосным"""
            ...  # TODO записать условие проверки високосного года

        def get_max_day(self, month: int, year: int) -> int:
            """Возвращает максимальное количество дней в месяце для указанного года"""
            ...  # TODO вернуть количество дней указанного месяца

        def is_valid_date(self, day: int, month: int, year: int) -> None:
            """Проверяет, является ли дата корректной"""
            ...  # TODO если указанный набор день, месяц и год неверны, то вызвать ошибку ValueError

        # TODO записать getter и setter для дня

        # TODO записать getter и setter для месяца

        # TODO записать getter и setter для года


    if __name__ == "__main__":
        ...
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
