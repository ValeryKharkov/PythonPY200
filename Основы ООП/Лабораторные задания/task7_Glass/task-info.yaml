type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    200 100
  learner_created: false
- name: task.py
  visible: true
  placeholders:
  - offset: 27
    length: 27
    placeholder_text: '# TODO  создать класс Glass'
    initial_state:
      length: 27
      offset: 27
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Glass:
          def __init__(self, capacity_volume: Union[int, float], occupied_volume: Union[int, float]):
              self.capacity_volume = None
              self.init_capacity_volume(capacity_volume)

              self.occupied_volume = None
              self.init_occupied_volume(occupied_volume)

          def init_capacity_volume(self, capacity_volume: [int, float]):
              if not isinstance(capacity_volume, (int, float)):
                  raise TypeError
              if not capacity_volume > 0:
                  raise ValueError
              self.capacity_volume = capacity_volume  # объем стакана

          def init_occupied_volume(self, occupied_volume):
              if not isinstance(occupied_volume, (int, float)):
                  raise TypeError
              if occupied_volume < 0:
                  raise ValueError
              self.occupied_volume = occupied_volume  # объем жидкости в стакане
  text: |
    from typing import Union


    # TODO  создать класс Glass


    if __name__ == "__main__":
        glass = Glass(200, 100)  # экземпляр класса
        print(glass.capacity_volume, glass.occupied_volume)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
