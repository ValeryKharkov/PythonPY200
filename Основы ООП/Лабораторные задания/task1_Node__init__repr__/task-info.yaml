type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Node(1, Node(2, None))
    Node(2, None)
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 371
    length: 68
    placeholder_text: |-
      # TODO  инициализировать атрибуты экземпляра класса Node
              ...
    initial_state:
      length: 68
      offset: 371
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      self.value = value
              self.next = next_
  - offset: 445
    length: 60
    placeholder_text: '# TODO реализовать метод __repr__ для отображения экземпляра'
    initial_state:
      length: 60
      offset: 445
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      def __repr__(self) -> str:
              return f"Node({self.value}, {self.next})"
  - offset: 552
    length: 40
    placeholder_text: '...  # TODO инициализировать первый узел'
    initial_state:
      length: 40
      offset: 552
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Node(1)
  - offset: 612
    length: 40
    placeholder_text: '...  # TODO инициализировать второй узел'
    initial_state:
      length: 40
      offset: 612
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Node(2)
  - offset: 675
    length: 78
    placeholder_text: '...  # TODO через атрибут экземпляра устанавливаем первому
      узлу следующий узел'
    initial_state:
      length: 78
      offset: 675
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: second_node
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            # TODO  инициализировать атрибуты экземпляра класса Node
            ...

        # TODO реализовать метод __repr__ для отображения экземпляра


    if __name__ == '__main__':
        first_node = ...  # TODO инициализировать первый узел

        second_node = ...  # TODO инициализировать второй узел
        first_node.next = ...  # TODO через атрибут экземпляра устанавливаем первому узлу следующий узел

        print(first_node)
        print(second_node)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
