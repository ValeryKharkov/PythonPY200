type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Node(1, Node(2, None))
    Node(2, None)
  learner_created: false
- name: task.py
  visible: true
  placeholders:
  - offset: 1025
    length: 31
    placeholder_text: '...  # TODO реализовать функцию'
    initial_state:
      length: 31
      offset: 1025
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: left_node.set_next(right_node)
  - offset: 1142
    length: 71
    placeholder_text: '...  # TODO связать между собой два узла с помощью функции
      linked_nodes'
    initial_state:
      length: 71
      offset: 1142
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: linked_nodes(first_node, second_node)
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            self.next = None
            self.set_next(next_)

        def __repr__(self) -> str:
            return f"Node({self.value}, {self.next})"

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        def set_next(self, next_: Optional["Node"] = None) -> None:
            self.is_valid(next_)
            self.next = next_


    def linked_nodes(left_node: Node, right_node: Optional["Node"] = None) -> None:
        """
        Функция, которая связывает между собой два узла.

        :param left_node: Левый или предыдущий узел
        :param right_node: Правый или следующий узел
        """
        ...  # TODO реализовать функцию


    if __name__ == '__main__':
        first_node = Node(1)
        second_node = Node(2)

        ...  # TODO связать между собой два узла с помощью функции linked_nodes

        print(first_node)
        print(second_node)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
