type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    [Node(0, None), Node(1, None), Node(2, None), Node(3, None), Node(4, None)]
    [Node(0, Node(1)), Node(1, Node(2)), Node(2, Node(3)), Node(3, Node(4)), Node(4, None)]
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 628
    length: 58
    placeholder_text: '...  # TODO метод должен возвращать значение текущего узла'
    initial_state:
      length: 58
      offset: 628
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: return str(self.value)
  - offset: 1325
    length: 68
    placeholder_text: '# TODO реализуйте алгоритм, который свяжет между собой узлы
      в списке'
    initial_state:
      length: 68
      offset: 1325
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      for i in range(len(list_nodes) - 1):
              current_node = list_nodes[i]
              next_node = list_nodes[i+1]
              linked_nodes(current_node, next_node)
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            self.next = None
            self.set_next(next_)

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            ...  # TODO метод должен возвращать значение текущего узла

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        def set_next(self, next_: Optional["Node"] = None) -> None:
            self.is_valid(next_)
            self.next = next_


    def linked_nodes(left_node: Node, right_node: Optional["Node"] = None) -> None:
        """
        Функция, которая связывает между собой два узла.

        :param left_node: Левый или предыдущий узел
        :param right_node: Правый или следующий узел
        """
        left_node.set_next(right_node)


    if __name__ == "__main__":
        list_nodes = [Node(value) for value in range(5)]
        print(list_nodes)

        # TODO реализуйте алгоритм, который свяжет между собой узлы в списке

        print(list_nodes)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
