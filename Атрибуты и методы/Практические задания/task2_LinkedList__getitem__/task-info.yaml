type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    [Node(1, Node(2)), Node(2, Node(3)), Node(3, None)]
    2
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: node.py
  visible: true
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            self.next = None
            self.set_next(next_)

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            return str(self.value)

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        def set_next(self, next_: Optional["Node"] = None) -> None:
            self.is_valid(next_)
            self.next = next_
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 183
    length: 48
    placeholder_text: '...  # TODO добавить указатель на первый элемент'
    initial_state:
      length: 48
      offset: 183
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'self.head: Optional[Node] = None'
  - offset: 532
    length: 56
    placeholder_text: '...  # TODO инициализировать указатель на первый элемент'
    initial_state:
      length: 56
      offset: 532
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self.head = self.list_nodes[0]
  - offset: 1346
    length: 41
    placeholder_text: '# TODO проверка правильности типа индекса'
    initial_state:
      length: 41
      offset: 1346
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if not isinstance(index, int):
                  raise TypeError
  - offset: 1412
    length: 41
    placeholder_text: '...  # TODO чему равен начальный элемент?'
    initial_state:
      length: 41
      offset: 1412
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self.head
  - offset: 1462
    length: 57
    placeholder_text: '...  # TODO с помощью цикла for добраться до нужного узла'
    initial_state:
      length: 57
      offset: 1462
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      for _ in range(index):
                  current_node = current_node.next
  - offset: 1674
    length: 49
    placeholder_text: '...  # TODO метод должен возвращать значение узла'
    initial_state:
      length: 49
      offset: 1674
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      node = self.step_by_step_on_nodes(index)
              return node.value
  text: |
    from typing import Iterable, Optional, Any

    from node import Node


    class LinkedList:
        def __init__(self, data: Iterable = None):
            """Конструктор связного списка"""
            ...  # TODO добавить указатель на первый элемент

            self.list_nodes = []
            if data is not None:
                self.init_linked_list(data)

        def init_linked_list(self, data: Iterable):
            """ Метод, который создает вспомогательный список и связывает в нём узлы. """
            self.list_nodes = [Node(value) for value in data]
            ...  # TODO инициализировать указатель на первый элемент

            for i in range(len(self.list_nodes) - 1):
                current_node = self.list_nodes[i]
                next_node = self.list_nodes[i + 1]
                self.linked_nodes(current_node, next_node)

        @staticmethod
        def linked_nodes(left_node: Node, right_node: Optional[Node] = None) -> None:
            """
            Функция, которая связывает между собой два узла.

            :param left_node: Левый или предыдущий узел
            :param right_node: Правый или следующий узел
            """
            left_node.set_next(right_node)

        def __repr__(self) -> str:
            return str(self.list_nodes)

        def step_by_step_on_nodes(self, index: int) -> Node:
            """ Функция выполняет перемещение по узлам до указанного индекса. И возвращает узел. """
            # TODO проверка правильности типа индекса

            current_node = ...  # TODO чему равен начальный элемент?
            ...  # TODO с помощью цикла for добраться до нужного узла

            return current_node

        def __getitem__(self, index: int) -> Any:
            """ Метод возвращает значение узла по указанному индексу. """
            ...  # TODO метод должен возвращать значение узла


    if __name__ == "__main__":
        list_ = [1, 2, 3]
        linked_list = LinkedList(list_)
        print(linked_list)

        print(linked_list[1])
  learner_created: false
status: Unchecked
record: -1
