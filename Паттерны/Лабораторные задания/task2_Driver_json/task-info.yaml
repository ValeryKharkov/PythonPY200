type: theory
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 1172
    length: 39
    placeholder_text: '# TODO Реализовать класс JsonFileDriver'
    initial_state:
      length: 39
      offset: 1172
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class JsonFileDriver(IStructureDriver):
          def __init__(self, json_filename):
              self.json_filename = json_filename

          def read(self) -> Iterable:
              with open(self.json_filename) as f:
                  input_ = json.load(f)
              if not isinstance(input_, list):
                  raise TypeError()

              return input_

          def write(self, data: Iterable) -> None:
              data = [value for value in data]
              with open(self.json_filename, 'w') as file:
                  json.dump(data, file)

          def __repr__(self):
              return f"{self.__class__.__name__}(\"{self.json_filename}\")"
  text: |
    import json
    from typing import Iterable
    from abc import ABC, abstractmethod


    class IStructureDriver(ABC):
        @abstractmethod
        def read(self) -> Iterable:
            """
            Считывает информацию из драйвера и возвращает её для объекта, использующего этот драйвер

            :return Последовательность элементов, считанная драйвером, для объекта
            """
            pass

        @abstractmethod
        def write(self, data: Iterable) -> None:
            """
            Получает информацию из объекта, использующего этот драйвер, и записывает её в драйвер

            :param data Последовательность элементов, полученная от объекта, для записи драйвером
            """
            pass


    class SimpleFileDriver(IStructureDriver):
        def __init__(self, filename):
            self.filename = filename

        def read(self) -> Iterable:
            with open(self.filename) as f:
                return [int(line) for line in f]

        def write(self, data: Iterable) -> None:
            with open(self.filename, "w") as f:
                for value in data:
                    f.write(str(value))
                    f.write('\n')

        def __repr__(self):
            return f"{self.__class__.__name__}(\"{self.filename}\")"


    # TODO Реализовать класс JsonFileDriver


    if __name__ == "__main__":
        # Write your solution here
        pass
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
