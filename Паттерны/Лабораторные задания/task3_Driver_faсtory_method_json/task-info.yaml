type: theory
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 641
    length: 51
    placeholder_text: '# TODO реализовать класс JsonFileDriveFactoryMethod'
    initial_state:
      length: 51
      offset: 641
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class JsonFileDriverFactoryMethod(DriverFactoryMethod):
          DEFAULT_NAME = 'untitled.json'

          @classmethod
          def get_driver(cls) -> IStructureDriver:
              filename = input('Введите название json файла: (.json)').strip()
              filename = filename or cls.DEFAULT_NAME
              if not filename.endswith('.json'):
                  filename = f'{filename}.json'

              return JsonFileDriver(filename)
  text: |
    from abc import ABC, abstractmethod

    from drivers import IStructureDriver, SimpleFileDriver, JsonFileDriver


    class DriverFactoryMethod(ABC):
        @classmethod
        @abstractmethod
        def get_driver(cls) -> IStructureDriver:
            ...


    class SimpleFileFactoryMethod(DriverFactoryMethod):
        DEFAULT_NAME = 'untitled.txt'

        @classmethod
        def get_driver(cls) -> IStructureDriver:
            filename = input('Введите название текстового файла: (.txt)').strip()
            filename = filename or cls.DEFAULT_NAME
            if not filename.endswith('.txt'):
                filename = f'{filename}.txt'

            return SimpleFileDriver(filename)


    # TODO реализовать класс JsonFileDriveFactoryMethod


    if __name__ == '__main__':
        driver = JsonFileDriverFactoryMethod.get_driver()
        print(driver)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: drivers.py
  visible: true
  placeholders:
  - offset: 1172
    length: 6
    placeholder_text: '# TODO'
    dependency:
      section: Паттерны
      lesson: Лабораторные задания
      task: task2_Driver_json
      file: main.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 6
      offset: 1172
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class JsonFileDriver(IStructureDriver):
          def __init__(self, json_filename):
              self.json_filename = json_filename

          def read(self) -> Sequence:
              with open(self.json_filename) as f:
                  input_ = json.load(f)
              if not isinstance(input_, list):
                  raise TypeError()

              return input_

          def write(self, data: Sequence) -> None:
              data = [value for value in data]
              with open(self.json_filename, 'w') as file:
                  json.dump(data, file)

          def __repr__(self):
              return f"{self.__class__.__name__}(\"{self.json_filename}\")"
  text: |
    import json
    from typing import Sequence
    from abc import ABC, abstractmethod


    class IStructureDriver(ABC):
        @abstractmethod
        def read(self) -> Sequence:
            """
            Считывает информацию из драйвера и возвращает её для объекта, использующего этот драйвер

            :return Последовательность элементов, считанная драйвером, для объекта
            """
            pass

        @abstractmethod
        def write(self, data: Sequence) -> None:
            """
            Получает информацию из объекта, использующего этот драйвер, и записывает её в драйвер

            :param data Последовательность элементов, полученная от объекта, для записи драйвером
            """
            pass


    class SimpleFileDriver(IStructureDriver):
        def __init__(self, filename):
            self.filename = filename

        def read(self) -> Sequence:
            with open(self.filename) as f:
                return [int(line) for line in f]

        def write(self, data: Sequence) -> None:
            with open(self.filename, "w") as f:
                for value in data:
                    f.write(str(value))
                    f.write('\n')

        def __repr__(self):
            return f"{self.__class__.__name__}(\"{self.filename}\")"


    # TODO


    if __name__ == '__main__':
        write_data = [1, 2, 3]
        driver = SimpleFileDriver('tmp.txt')
        driver.write(write_data)

        read_data = driver.read()
        print(read_data)
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
