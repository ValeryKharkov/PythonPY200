type: theory
files:
- name: input.txt
  visible: true
  text: |
    1
    2
    3
    4
    5
    6
    7
    8
    9
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 368
    length: 44
    placeholder_text: '# TODO свойство для driver (getter + setter)'
    initial_state:
      length: 44
      offset: 368
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      @property
          def driver(self):
              return self._driver

          @driver.setter
          def driver(self, driver: IStructureDriver):
              self._driver = driver
  - offset: 827
    length: 45
    placeholder_text: '...  # TODO инициализировать SimpleFileDriver'
    initial_state:
      length: 45
      offset: 827
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: SimpleFileFactoryMethod.get_driver()
  - offset: 918
    length: 43
    placeholder_text: '...  # TODO инициализировать JsonFileDriver'
    initial_state:
      length: 43
      offset: 918
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: JsonFileDriverFactoryMethod.get_driver()
  text: |
    from typing import Iterable

    from linked_list import LinkedList
    from drivers import IStructureDriver
    from factory_method import SimpleFileFactoryMethod, JsonFileDriverFactoryMethod


    class LinkedListWithDriver(LinkedList):
        def __init__(self, data: Iterable = None, driver: IStructureDriver = None):
            super().__init__(data)
            self.driver = driver

        # TODO свойство для driver (getter + setter)

        def read(self):
            """ С помощью драйвера считать данные и поместить их в LinkedList. """
            data_from_driver = self.driver.read()

            for value in data_from_driver:
                self.append(value)

        def write(self):
            """ С помощью драйвера записать данные из LinkedList. """
            self.driver.write(self)


    if __name__ == '__main__':
        ll = LinkedListWithDriver()
        ll.driver = ...  # TODO инициализировать SimpleFileDriver
        ll.read()
        print(ll)

        ll.driver = ...  # TODO инициализировать JsonFileDriver
        ll.write()
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: node.py
  visible: true
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value
            self.next = next_  # вызовется setter

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            return str(self.value)

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        @property
        def next(self):
            return self._next

        @next.setter
        def next(self, next_: Optional["Node"]):
            self.is_valid(next_)
            self._next = next_
  learner_created: false
- name: linked_list.py
  visible: true
  text: |
    from typing import Any, Iterable, Optional

    from node import Node


    class LinkedList:
        def __init__(self, data: Iterable = None):
            """Конструктор связного списка"""
            self.len = 0
            self.head: Optional[Node] = None
            self.tail = self.head

            if data is not None:
                for value in data:
                    self.append(value)

        def append(self, value: Any):
            """ Добавление элемента в конец связного списка. """
            append_node = Node(value)

            if self.head is None:
                self.head = self.tail = append_node
            else:
                self.linked_nodes(self.tail, append_node)
                self.tail = append_node

            self.len += 1

        def step_by_step_on_nodes(self, index: int) -> Node:
            """ Функция выполняет перемещение по узлам до указанного индекса. И возвращает узел. """
            if not isinstance(index, int):
                raise TypeError()

            if not 0 <= index < self.len:  # для for
                raise IndexError()

            current_node = self.head
            for _ in range(index):
                current_node = current_node.next

            return current_node

        @staticmethod
        def linked_nodes(left_node: Node, right_node: Optional[Node] = None) -> None:
            """
            Функция, которая связывает между собой два узла.

            :param left_node: Левый или предыдущий узел
            :param right_node: Правый или следующий узел
            """
            left_node.next = right_node

        def __getitem__(self, index: int) -> Any:
            """ Метод возвращает значение узла по указанному индексу. """
            node = self.step_by_step_on_nodes(index)
            return node.value

        def __setitem__(self, index: int, value: Any) -> None:
            """ Метод устанавливает значение узла по указанному индексу. """
            node = self.step_by_step_on_nodes(index)
            node.value = value

        def to_list(self) -> list:
            return [linked_list_value for linked_list_value in self]

        def __repr__(self) -> str:
            return f"{self.__class__.__name__}({self.to_list()})"

        def __str__(self) -> str:
            return f"{self.to_list()}"

        def __delitem__(self, index: int):
            if not isinstance(index, int):
                raise TypeError()

            if not 0 <= index < self.len:  # для for
                raise IndexError()

            if index == 0:
                self.head = self.head.next
            elif index == self.len - 1:
                tail = self.step_by_step_on_nodes(index-1)
                tail.next = None
            else:
                prev_node = self.step_by_step_on_nodes(index-1)
                del_node = prev_node.next
                next_node = del_node.next

                self.linked_nodes(prev_node, next_node)

            self.len -= 1


    if __name__ == "__main__":
        list_ = [1, 2, 3]

        ll = LinkedList(list_)
        print(ll)

        ll.append(100)
        print(ll)
  learner_created: false
- name: drivers.py
  visible: true
  placeholders:
  - offset: 1172
    length: 6
    placeholder_text: '# TODO'
    dependency:
      section: Паттерны
      lesson: Лабораторные задания
      task: task2_Driver_json
      file: main.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 6
      offset: 1172
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class JsonFileDriver(IStructureDriver):
          def __init__(self, json_filename):
              self.json_filename = json_filename

          def read(self) -> Iterable:
              with open(self.json_filename) as f:
                  input_ = json.load(f)
              if not isinstance(input_, list):
                  raise TypeError()

              return input_

          def write(self, data: Iterable) -> None:
              data = [value for value in data]
              with open(self.json_filename, 'w') as file:
                  json.dump(data, file)

          def __repr__(self):
              return f"{self.__class__.__name__}(\"{self.json_filename}\")"
  text: |
    import json
    from typing import Iterable
    from abc import ABC, abstractmethod


    class IStructureDriver(ABC):
        @abstractmethod
        def read(self) -> Iterable:
            """
            Считывает информацию из драйвера и возвращает её для объекта, использующего этот драйвер

            :return Последовательность элементов, считанная драйвером, для объекта
            """
            pass

        @abstractmethod
        def write(self, data: Iterable) -> None:
            """
            Получает информацию из объекта, использующего этот драйвер, и записывает её в драйвер

            :param data Последовательность элементов, полученная от объекта, для записи драйвером
            """
            pass


    class SimpleFileDriver(IStructureDriver):
        def __init__(self, filename):
            self.filename = filename

        def read(self) -> Iterable:
            with open(self.filename) as f:
                return [int(line) for line in f]

        def write(self, data: Iterable) -> None:
            with open(self.filename, "w") as f:
                for value in data:
                    f.write(str(value))
                    f.write('\n')

        def __repr__(self):
            return f"{self.__class__.__name__}(\"{self.filename}\")"


    # TODO


    if __name__ == '__main__':
        write_data = [1, 2, 3]
        driver = SimpleFileDriver('tmp.txt')
        driver.write(write_data)

        read_data = driver.read()
        print(read_data)
  learner_created: false
- name: factory_method.py
  visible: true
  placeholders:
  - offset: 641
    length: 1
    placeholder_text: '#'
    dependency:
      section: Паттерны
      lesson: Лабораторные задания
      task: task3_Driver_faсtory_method_json
      file: main.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 1
      offset: 641
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class JsonFileDriverFactoryMethod(DriverFactoryMethod):
          DEFAULT_NAME = 'untitled.json'

          @classmethod
          def get_driver(cls) -> IStructureDriver:
              filename = input('Введите название json файла: (.json)').strip()
              filename = filename or cls.DEFAULT_NAME
              if not filename.endswith('.json'):
                  filename = f'{filename}.json'

              return JsonFileDriver(filename)
  text: |
    from abc import ABC, abstractmethod

    from drivers import IStructureDriver, SimpleFileDriver, JsonFileDriver


    class DriverFactoryMethod(ABC):
        @classmethod
        @abstractmethod
        def get_driver(cls) -> IStructureDriver:
            ...


    class SimpleFileFactoryMethod(DriverFactoryMethod):
        DEFAULT_NAME = 'untitled.txt'

        @classmethod
        def get_driver(cls) -> IStructureDriver:
            filename = input('Введите название текстового файла: (.txt)').strip()
            filename = filename or cls.DEFAULT_NAME
            if not filename.endswith('.txt'):
                filename = f'{filename}.txt'

            return SimpleFileDriver(filename)


    #


    if __name__ == '__main__':
        driver = SimpleFileFactoryMethod.get_driver()
        print(driver)
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
