type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Вызван метод "__del__"
    Вызван метод "__del__"
    Вызван метод "__del__"
    Вызван метод "__del__"
    Вызван метод "__del__"
    []
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 351
    length: 43
    placeholder_text: 'self._prev  # TODO объект теперь вызываемый'
    initial_state:
      length: 43
      offset: 351
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self._prev()
  - offset: 493
    length: 47
    placeholder_text: 'self._prev = prev  # TODO сделать слабую ссылку'
    initial_state:
      length: 47
      offset: 493
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self._prev = None if prev is None else weakref.ref(prev)
  text: |
    from typing import Any, Optional
    import weakref

    from node import Node
    from linked_list import LinkedList


    class DoubleLinkedNode(Node):
        def __init__(self, value: Any, prev: Optional["Node"] = None, next_: Optional["Node"] = None):
            super().__init__(value, next_)
            self.prev = prev

        @property
        def prev(self):
            return self._prev  # TODO объект теперь вызываемый

        @prev.setter
        def prev(self, prev: Optional["Node"]):
            self.is_valid(prev)
            self._prev = prev  # TODO сделать слабую ссылку

        def __repr__(self) -> str:
            next_prev = None if self.prev is None else f"DoubleLinkedNode({self.prev})"
            next_repr = None if self.next is None else f"DoubleLinkedNode({self.next})"  # todo make all

            return f"DoubleLinkedNode({self.value}, {next_prev}, {next_repr})"


    class DoubleLinkedList(LinkedList):
        @staticmethod
        def linked_nodes(left_node: DoubleLinkedNode, right_node: Optional[DoubleLinkedNode] = None) -> None:
            left_node.next = right_node
            right_node.prev = left_node

        def append(self, value: Any):
            """ Добавление элемента в конец связного списка. """
            append_node = DoubleLinkedNode(value)

            if self.head is None:
                self.head = self.tail = append_node
            else:
                self.linked_nodes(self.tail, append_node)
                self.tail = append_node

            self.len += 1


    if __name__ == "__main__":
        ll = DoubleLinkedList([1, 2, 3, 4, 5])

        ll.clear()

        print(ll)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: node.py
  visible: true
  text: |-
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            self.next = next_  # вызовется setter

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            return str(self.value)

        def is_valid(self, node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        @property
        def next(self):
            return self._next

        @next.setter
        def next(self, next_: Optional["Node"]):
            self.is_valid(next_)
            self._next = next_

        def __del__(self):
            print("Вызван метод \"__del__\"")
  learner_created: false
- name: linked_list.py
  visible: true
  text: |
    from typing import Any, Iterable, Optional, Iterator

    from node import Node


    class LinkedList:
        def __init__(self, data: Iterable = None):
            """Конструктор связного списка"""
            self.len = 0
            self.head: Optional[Node] = None
            self.tail = self.head

            if data is not None:
                for value in data:
                    self.append(value)

        def append(self, value: Any):
            """ Добавление элемента в конец связного списка. """
            append_node = Node(value)

            if self.head is None:
                self.head = self.tail = append_node
            else:
                self.linked_nodes(self.tail, append_node)
                self.tail = append_node

            self.len += 1

        def step_by_step_on_nodes(self, index: int) -> Node:
            """ Функция выполняет перемещение по узлам до указанного индекса. И возвращает узел. """
            if not isinstance(index, int):
                raise TypeError()

            if not 0 <= index < self.len:  # для for
                raise IndexError()

            current_node = self.head
            for _ in range(index):
                current_node = current_node.next

            return current_node

        @staticmethod
        def linked_nodes(left_node: Node, right_node: Optional[Node] = None) -> None:
            """
            Функция, которая связывает между собой два узла.

            :param left_node: Левый или предыдущий узел
            :param right_node: Правый или следующий узел
            """
            left_node.next = right_node

        def __getitem__(self, index: int) -> Any:
            """ Метод возвращает значение узла по указанному индексу. """
            node = self.step_by_step_on_nodes(index)
            return node.value

        def __setitem__(self, index: int, value: Any) -> None:
            """ Метод устанавливает значение узла по указанному индексу. """
            node = self.step_by_step_on_nodes(index)
            node.value = value

        def to_list(self) -> list:
            return [linked_list_value for linked_list_value in self]

        def __repr__(self) -> str:
            return f"{self.__class__.__name__}({self.to_list()})"

        def __str__(self) -> str:
            return f"{self.to_list()}"

        def nodes_iterator(self) -> Iterator[Node]:
            current_node = self.head
            for _ in range(self.len):
                yield current_node
                current_node = current_node.next

        def clear(self):
            self.head = None
            self.tail = None

            self.len = 0


    if __name__ == "__main__":
        list_ = [1, 2, 3]

        ll = LinkedList(list_)
        print(ll)

        ll.append(100)
        print(ll)
  learner_created: false
status: Unchecked
record: -1
