type: edu
files:
- name: task.py
  visible: true
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value
            self.next = next_  # вызовется setter

        def __repr__(self) -> str:
            return f"Node({self.value}, {None})" if self.next is None else f"Node({self.value}, Node({self.next}))"

        def __str__(self) -> str:
            return str(self.value)

        @staticmethod
        def is_valid(node: Any) -> None:
            if not isinstance(node, (type(None), Node)):
                raise TypeError

        @property
        def next(self):
            return self._next

        @next.setter
        def next(self, next_: Optional["Node"]):
            self.is_valid(next_)
            self._next = next_
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import Node


    # todo: replace this with an actual test
    class TestCase(unittest.TestCase):
        def test_init_node_without_next(self):
            node = Node("node_without_next")

            msg = "Значение следующего узла по умолчанию должно быть None"
            self.assertIsNone(node.next, msg)

        def test_init_node_with_next(self):
            right_node = Node("right")
            left_node = Node("left", right_node)

            msg = "Значение следующего при инициализации некорректно"
            self.assertEqual(repr(left_node.next), repr(right_node), msg)

        def test_repr_node_without_next(self):
            node = Node("node_without_next")

            msg = "Значение представления __repr__ некорректно для узла без следующего узла. "
            self.assertEqual(repr(node), "Node(node_without_next, None)", msg)

        # @unittest.skip("Тест пропущен по причине ...")
        # def test_repr_node_with_next(self):
        #     ...

        def test_str(self):
            some_value = 5
            node = Node(some_value)

            self.assertEqual(str(node), str(some_value))

        def test_is_valid(self):
            Node.is_valid(None)
            Node.is_valid(Node("correct_node"))

            with self.assertRaises(TypeError):
                Node.is_valid("incorrect_type")

        def test_next_property(self):
            self.assertEqual(Node("test").next, None)

            next_node = Node("next")
            self.assertEqual(id(Node("test", next_node).next), id(next_node))
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: test_task.py
  visible: true
  placeholders:
  - offset: 56
    length: 48
    placeholder_text: '...):  # TODO наследоваться от unittest.TestCase'
    initial_state:
      length: 48
      offset: 56
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'unittest.TestCase):'
  - offset: 247
    length: 66
    placeholder_text: '...  # TODO с помощью метода assertIsNone проверить следующий
      узел'
    initial_state:
      length: 66
      offset: 247
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      node = Node("node_without_next")

              msg = "Значение следующего узла по умолчанию должно быть None"
              self.assertIsNone(node.next, msg)
  - offset: 452
    length: 40
    placeholder_text: '...  # TODO проверить что узлы связались'
    initial_state:
      length: 40
      offset: 452
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      right_node = Node("right")
              left_node = Node("left", right_node)

              msg = "Значение следующего при инициализации некорректно"
              self.assertEqual(repr(left_node.next), repr(right_node), msg)
  - offset: 623
    length: 56
    placeholder_text: '...  # TODO проверить метод __repr__ без следующего узла'
    initial_state:
      length: 56
      offset: 623
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      node = Node("node_without_next")

              msg = "Значение представления __repr__ некорректно для узла без следующего узла. "
              self.assertEqual(repr(node), "Node(node_without_next, None)", msg)
  - offset: 685
    length: 62
    placeholder_text: '...  # TODO пропустить тест с помощью декоратора unittest.skip'
    initial_state:
      length: 62
      offset: 685
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '@unittest.skip("Тест пропущен по причине ...")'
  - offset: 973
    length: 40
    placeholder_text: '# TODO проверить строковое представление'
    initial_state:
      length: 40
      offset: 973
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: self.assertEqual(str(node), str(some_value))
  - offset: 1052
    length: 57
    placeholder_text: '...  # TODO проверить метод is_valid при корректных узлах'
    initial_state:
      length: 57
      offset: 1052
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      Node.is_valid(None)
              Node.is_valid(Node("correct_node"))
  - offset: 1119
    length: 99
    placeholder_text: '# TODO с помощью менеджера контакста и метода assertRaises
      проверить корректность вызываемой ошибки'
    initial_state:
      length: 99
      offset: 1119
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      with self.assertRaises(TypeError):
                  Node.is_valid("incorrect_type")
  text: |
    import unittest

    from task import Node


    class TestCase(...):  # TODO наследоваться от unittest.TestCase
        def test_init_node_without_next(self):
            """Проверить следующий узел после инициализации с аргументом next_ по умолчанию"""
            ...  # TODO с помощью метода assertIsNone проверить следующий узел

        def test_init_node_with_next(self):
            """Проверить следующий узел после инициализации с переданным аргументом next_"""
            ...  # TODO проверить что узлы связались

        def test_repr_node_without_next(self):
            """Проверить метод __repr__, для случая когда нет следующего узла."""
            ...  # TODO проверить метод __repr__ без следующего узла

        ...  # TODO пропустить тест с помощью декоратора unittest.skip
        def test_repr_node_with_next(self):
            """Проверить метод __repr__, для случая когда установлен следующий узел."""
            ...

        def test_str(self):
            some_value = 5
            node = Node(some_value)

            # TODO проверить строковое представление

        def test_is_valid(self):
            ...  # TODO проверить метод is_valid при корректных узлах

            # TODO с помощью менеджера контакста и метода assertRaises проверить корректность вызываемой ошибки
  learner_created: false
status: Unchecked
record: -1
